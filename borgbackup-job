#!/bin/bash

PS4='+(${LINENO}) ' # add linenumbers to the trace when run with 'bash -x'
short_usage="Usage: $NAME envfile [OPTION]... [PATHS_TO_BACKUP]"
NAME=$(basename "$0")
show_help()  {
  cat <<EOM  | sed -e's/^  //'   # left justify help
  ${short_usage}
  Create backup with Borg

  envfile           Settings file for the backup to run

  Options:
    --help          Shows this help section
    --exclude       Path to exclude from backup, can be stated multiple times
                    This option is passed directly to borg,
                    see "borg help patterns" for more info

  PATHS_TO_BACKUP   Files to backup. If given, this will override the files to backup
                    specified in the settings file.

  Examples:
    # Backup multiple paths
    $NAME /home/arthur/guide /home/arthur/memories-from-earth

    # Exclude secrets and drafts
    $NAME /home/arthur/guide --exclude '*.secret' --exclude '*/guide/drafts'

    # Use configuration stored in an envfile
    $NAME --envfile ~/.borgbackup/backup.env
EOM
}

DEFAULT_CONFDIR="${HOME}/.borgbackup"

# Some helpers and error handling
info() {
  # print timestamped info on stderr
  if [[ -n $1 ]]; then
    printf "\n%(%F_%T)T %s\n" -1 "$*" >&2
  fi
}
die() {
  # exit with indicated exit code and
  exitcode=$1
  shift
  info "$*"
  exit "$exitcode"
}
abort() {
  # exits with exit code 2 and message on stderr, without timestamp
  # for user messages on commandline, i.e. at startup failure, where timestamp is ugly
  if [[ -n $1 ]]; then
    printf "%s\n" "$*" >&2
  fi
  exit 2
}
warning_or_error() {
  # borg exit code = 1 is warning, others are error.
  # This translates the code to text used in message to user
  code=$1
  ret="warning"
  [[ $code -gt 1 ]] && ret="error"
  echo $ret
}
trap 'die 2 "Backup interrupted"' INT TERM

source_conf_file() {
  unqualified_name="$1"
  if [[ -n $unqualified_name ]]; then
    filename="$unqualified_name"
    if [[ ${filename:0:1} != '/' ]]; then
      filename="${DEFAULT_CONFDIR}"/"${filename}"
    fi
    # shellcheck disable=SC1090
    source "$filename" || abort
  fi
}

init() {
  if [[ $# -eq 0 ]]; then  # No parameters?
    abort "$(show_help)"
  fi

  options=$(getopt --name "$NAME" --longoptions "help,dry-run,exclude:" -- "" "$@")
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then # Problem with getting options?
    abort "$(show_help)"
  fi

  # Sets double dashes, which marks end of optional parameters
  eval set -- "$options"
  unset options

  excludes_on_cmdline=()
  dry_run=false
  envfile="$1"
  [[ -r ${envfile} ]] || abort "enfile argument needed\n$short_usage"
  shift
  while true; do
    case $1 in
      '--exclude')
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        excludes_on_cmdline+=("$2")
        shift 2
        ;;
      '--dry-run')
        dry_run=true
        shift
        ;;
      '--help')
        show_help
        die 0
        ;;
      '--') # Separator between optional and positional parameters
        shift
        break
        ;;
    esac
  done

  paths_on_cmdline=("$@")
  set --

  source_conf_file "$envfile"

  # HOOKS is expected to be set in the envfile
  source_conf_file "$HOOKS"

  # PATHS_TO_BACKUP comes from $envfile, but files on command line overrides
  if [[ ${#paths_on_cmdline[*]} -gt 0 ]]; then
    PATHS_TO_BACKUP=("${paths_on_cmdline[@]}")
  fi
  [[ ${#PATHS_TO_BACKUP[*]} -eq 0 ]] && abort "invalid usage: nothing to backup (no files specified, and environment PATHS_TO_BACKUP is not set)"

  # EXCLUDE comes from $envfile, but patterns on command line overrides (does NOT add to what's in $envfile)
  EXCL=""
  if [[ ${#excludes_on_cmdline[*]} -gt 0 ]]; then
    for excl in "${excludes_on_cmdline[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  elif [[ ${#EXCLUDE[*]} -gt 0 ]]; then
    for excl in "${EXCLUDE[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  fi
}

## main
init "$@"

info "$NAME starting"
trap 'info "$NAME ending"' EXIT

if [[ $(type -t post_backup) == 'function' ]]; then
  # use trap: in case 'borg create' fails we still want to restore system to production mode
  trap 'info "Running post-backup hook" ; post_backup ; info "$NAME ending"' EXIT
fi

if [[ $(type -t pre_backup) == 'function' ]]; then
  info "Running pre-backup hook"
  pre_backup
fi

if $dry_run; then
  echo "Dry run"
  echo "Exclude parameters: $EXCL"

  dry_run_paths=()
  for path in "${PATHS_TO_BACKUP[@]}"; do
    dry_run_paths+=("$path")
  done
  echo "Paths to backup: ${dry_run_paths[*]}"

  exit
fi

info "Starting borg backup"

# shellcheck disable=SC2086
borg create \
  --stats \
  --show-version \
  --show-rc \
  --filter AME \
  --list \
  $EXCL \
  ::'{now:%Y-%m-%dT%H:%M:%S}' \
  "${PATHS_TO_BACKUP[@]}" ||
  die $? "borg create ended with $(warning_or_error $?). Not pruning repository"

info "Pruning repository"

borg prune \
  --list \
  --show-rc \
  --keep-daily "${KEEP_DAILY:-14}" \
  --keep-weekly "${KEEP_WEEKLY:-4}" \
  --keep-monthly "${KEEP_MONTHLY:-12}" \
  --keep-yearly "${KEEP_YEARLY:-5}" ||
  die $? "borg prune ended with $(warning_or_error $?)."
