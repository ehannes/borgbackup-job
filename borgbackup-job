#!/bin/bash

PS4='+(${LINENO}) ' # add linenumbers to the trace when run with 'bash -x'
NAME=$(basename "$0")
short_usage="Usage: $NAME -e filename [OPTIONS...] [PATHS_TO_BACKUP]"
show_help()  {
  cat <<EOM  | sed -e's/^  //'   # left justify help
  ${short_usage}
  Create backup with Borg

  -e|--envfile filename   Settings file for the backup to run

  Options:
    --help                Shows this help section
    --exclude             Path to exclude from backup, can be stated multiple times
                          This option is passed directly to borg,
                          see "borg help patterns" for more info
    --dry-run             Test run, without actually taking a backup.

  PATHS_TO_BACKUP         Files to backup. If given, this will override the files to backup
                          specified in the settings file.

  Examples:
    # With required arguments
    $NAME --envfile ~/.borgbackup/backup_host.env

    # Override paths in envfile
    $NAME -e ~/.borgbackup/backup_host.env /home/arthur/guide /home/arthur/memories-from-earth

    # Override exclude in envfile
    $NAME -e ~/.borgbackup/backup_host.env /home/arthur/guide --exclude '*.secret' --exclude '*/guide/drafts'
EOM
}

DEFAULT_CONFDIR="${HOME}/.borgbackup"
MAX_RETRY_COUNT=10
RETRY_DELAY_HOURS=2

# Some helpers and error handling
info() {
  # print timestamped info on stderr
  if [[ -n $1 ]]; then
    echo -e "$*" >&2
  fi
}

die() {
  # exit with indicated exit code and message on stderr
  local exitcode=$1
  shift
  info "$*"
  exit "$exitcode"
}

warning_or_error() {
  # borg exit code = 1 is warning, others are error.
  # This translates the code to text used in message to user
  local code=$1
  ret="warning"
  [[ $code -gt 1 ]] && ret="error"
  echo $ret
}
trap 'die 2 "Backup interrupted"' INT TERM

expand_filename_to_source() {
  local unqualified_name="$1"
  local filename
  if [[ -n $unqualified_name ]]; then
    filename="$unqualified_name"
    if [[ ${filename:0:1} != '/' ]]; then
      filename="${DEFAULT_CONFDIR}"/"${filename}"
    fi
  fi
  echo "$filename"
}

source_conf_file() {
  filename=$(expand_filename_to_source "$1")
  [[ -z "$filename" ]] && return  # Can happen if there are no HOOKS
  # shellcheck disable=SC1090
  source "$filename" || die 21 "aborting after failed sourcing of $filename"
}

init() {
  local options
  declare -g orig_options="$*"
  options=$(getopt --name "$NAME" --longoptions "help,dry-run,exclude:,envfile:,_rerun:" -- "e:" "$@")
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then # Problem with getting options?
    die 2 "$(show_help)"
  fi

  # Sets double dashes, which marks end of getopt parameters
  eval set -- "$options"
  unset options

  local -a excludes_on_cmdline
  unset dry_run
  while true; do
    case $1 in
      --envfile|-e)
        [[ ${2:0:1} != '-' ]] || die 2 "$1 requires a filename argument"
        envfile="$2"
        shift 2
        ;;
      --exclude)
        [[ ${2:0:1} != '-' ]] || die 2 "$1 requires an argument"
        excludes_on_cmdline+=("$2")
        shift 2
        ;;
      --dry-run)
        dry_run="true"
        shift
        ;;
      --_rerun)
        [[ ${2:0:1} != '-' ]] || die 2 "$1 requires an argument"
        rerun_counter="$2"
        shift 2
        ;;
      --help)
        show_help
        die 0
        ;;
      --) # end of getopt parsed parameters
        shift
        break
        ;;
    esac
  done

  [[ -z ${envfile} ]] && die 2 "--envfile (or -e) needed (try \"$NAME --help\")\n$short_usage"
  [[ -e "$(expand_filename_to_source "${envfile}")" ]] || die 2 "envfile \"$envfile\" is not found\n$short_usage"
  [[ -r "$(expand_filename_to_source "${envfile}")" ]] || die 2 "envfile \"$envfile\" is not readable\n$short_usage"

  local -a paths_on_cmdline=("$@")
  set --

  # Initialize and reset constants that can be sourced from envfile
  unset BORG_PASSCOMMAND BORG_REPO
  unset HEALTHCHECKS_PINGKEY  HEALTHCHECKS_SLUG
  unset HOOKS
  unset KEEP_DAILY KEEP_MONTHLY KEEP_WEEKLY KEEP_YEARLY
  unset PATHS_TO_BACKUP

  source_conf_file "$envfile"

  # Unset functions that can be sourced from HOOKS
  unset -f pre_backup post_backup

  # HOOKS is expected to be set in the envfile
  source_conf_file "$HOOKS"

  # PATHS_TO_BACKUP comes from $envfile, but files on command line overrides
  if [[ ${#paths_on_cmdline[*]} -gt 0 ]]; then
    PATHS_TO_BACKUP=("${paths_on_cmdline[@]}")
  fi
  [[ ${#PATHS_TO_BACKUP[*]} -eq 0 ]] && die 2 "invalid usage: nothing to backup (no files specified, and environment PATHS_TO_BACKUP is not set)"

  # EXCLUDE comes from $envfile, but patterns on command line overrides (does NOT add to what's in $envfile)
  EXCL=""
  if [[ ${#excludes_on_cmdline[*]} -gt 0 ]]; then
    for excl in "${excludes_on_cmdline[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  elif [[ ${#EXCLUDE[*]} -gt 0 ]]; then
    for excl in "${EXCLUDE[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  fi
}

take_lock_or_die() {
  lockfile="$(expand_filename_to_source "$envfile")"
  exec {lockfd}<"$lockfile"
  if flock --exclusive --nonblock $lockfd; then
    :
  else
    die 1 "Backup already running. Exiting"
  fi
}

add_timestamp() {
  # adds timestamp to each line. To be called from a subprocess, since it never returns
  IFS=  # preserve leading/trailing whitespace in read
  while read -r line; do
    printf -v now "%(%F_%T)T" -1
    printf "%s %s\n" "$now" "$line"
  done
}

setup_logging() {
  local logdir logname envfile_nopath
  logdir=${LOGDIR:-"/var/log/borgbackup"}
  envfile_nopath=$(basename "$envfile")
  logname=${envfile_nopath%%.env}."$(date +%d)".log
  declare -g logfile="$logdir/$logname"

  mkdir -p "$logdir" || die 1 "unable to create logdir=$logdir" # don't accidentally delete files in next lines
  oldfile="$(find "$logdir" -name "$logname" ! -newermt 'now - 1day')"
  [[ -f "$oldfile" ]] && rm "$oldfile"
  touch "$logfile" || die 2 "unable to create file $logfile"

  info "Logging to file $logfile"
  exec > >(tee >(add_timestamp >> "$logfile")) 2>&1
}

run_hooks() {
  local hooks_to_run=("$@")
  for hook in "${hooks_to_run[@]}"; do
    if [[ $(type -t "$hook") == 'function' ]]; then
      if [[ $dry_run ]]; then
        info "Would run $hook hook"
      else
        info "Running $hook hook:"
        $hook
      fi
    fi
  done
}

data_to_send_to_healthcheck() {
  declare -g logfile
  declare -i maxloglines=60
  local logdata="(Full log available in $logfile)"$'\n'
  local logstart filelines
  read -r logstart filelines < <(awk -v logstart=1 "/$start_message/"'{logstart=NR}END{print logstart " " NR}' <"$logfile")
  (( filelines - logstart < maxloglines )) || logstart=$(( filelines - maxloglines ))
  logdata="$logdata""$(tail -n +$logstart "$logfile")"
  echo "$logdata"
}

healthcheck_report() {
  report_type=$1
  if [[ -n "$HEALTHCHECKS_PINGKEY" ]] && [[ -n "$HEALTHCHECKS_SLUG" ]]; then
    SLUGURL=https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"
    info "Reporting $report_type to healthchecks.io:"
    case $report_type in
      start)
        curl --silent --show-error --max-time 10 --retry 5 "$SLUGURL"/start
        ;;
      success)
        logdata="$(data_to_send_to_healthcheck)"
        curl --silent --show-error --max-time 10 --retry 5 --data-raw "$logdata" "$SLUGURL"
        ;;
      fail)
        logdata="$(data_to_send_to_healthcheck)"
        curl --silent --show-error --max-time 10 --retry 5 --data-raw "$logdata" "$SLUGURL"/fail
        ;;
    esac
    curl_ret=$?
    if ((curl_ret > 0)); then
      info "Reporting \"$report_type\" to healthchecks.io failed (curl returncode=$curl_ret)"
    else
      info " "  # hc-ping.com prints "OK" without "\n" at success.
    fi
  else
    info "hc-ping.com reporting is not enabled, not reporting $report_type"
  fi
}

## main
init "$@"
take_lock_or_die
setup_logging
start_message="$NAME starting${dry_run:+" dry-run"}${rerun_counter:+" (rerun $rerun_counter)"}"
info "$start_message"


healthcheck_report start

# use trap: in case the pre_backup hook fails/crashes we should try to restore system to production mode
trap 'run_hooks post_backup ; info "$NAME ending after failure"' EXIT
run_hooks pre_backup
trap - EXIT

if [[ $dry_run ]]; then
  borg() {
    info "Would run borg $*"
  }
fi

info "Running borg create:\n"
# shellcheck disable=SC2086
borg create \
  --stats \
  --show-version \
  --show-rc \
  --filter AME \
  --list \
  $EXCL \
  ::'{now:%Y-%m-%dT%H:%M:%S}' \
  "${PATHS_TO_BACKUP[@]}"

borg_result=$?
if (( borg_result > 0 ));then
  (( rerun_counter = rerun_counter + 1 ))
  if (( rerun_counter <= MAX_RETRY_COUNT ));then
    info "borg create ended with $(warning_or_error $borg_result) ($borg_result). Scheduling rerun in $RETRY_DELAY_HOURS hours"
    rerun_options="$(sed -Ee 's/--_rerun ..?//' <<< "$orig_options") --_rerun $rerun_counter"
    echo "$0 $rerun_options" | at "now + $RETRY_DELAY_HOURS hours"
  else
    if  (( rerun_counter != 1 ));then
      rerun_msg=" Max retry attempts ($MAX_RETRY_COUNT) have failed. Not retrying."
    fi
    info "borg create ended with $(warning_or_error $borg_result) ($borg_result).$rerun_msg Not pruning repository"
  fi
else
  info "\nPruning repository:"
  borg prune \
    --list \
    --show-rc \
    --keep-daily "${KEEP_DAILY:-14}" \
    --keep-weekly "${KEEP_WEEKLY:-4}" \
    --keep-monthly "${KEEP_MONTHLY:-12}" \
    --keep-yearly "${KEEP_YEARLY:-5}"

  borg_result=$?

  if (( borg_result > 0 ));then
    info "borg prune ended with $(warning_or_error $borg_result) ($borg_result)."
  fi
fi
info " "

run_hooks post_backup
hook_result=$?
if (( hook_result > 0 ));then
  info "post_backup failed with exit code $hook_result"
fi
if (( hook_result > 0 || borg_result > 0 )); then
  healthcheck_report fail
else
  healthcheck_report success
fi
info "\n$NAME ending"
