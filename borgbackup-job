#!/bin/bash

PS4='+(${LINENO}) ' # add linenumbers to the trace when run with 'bash -x'
NAME=$(basename "$0")
short_usage="Usage: $NAME -e filename [OPTIONS...] [PATHS_TO_BACKUP]"
show_help()  {
  cat <<EOM  | sed -e's/^  //'   # left justify help
  ${short_usage}
  Create backup with Borg

  -e|--envfile filename   Settings file for the backup to run

  Options:
    --help                Shows this help section
    --exclude             Path to exclude from backup, can be stated multiple times
                          This option is passed directly to borg,
                          see "borg help patterns" for more info
    --dry-run             Test run, without actually taking a backup.

  PATHS_TO_BACKUP         Files to backup. If given, this will override the files to backup
                          specified in the settings file.

  Examples:
    # With required arguments
    $NAME --envfile ~/.borgbackup/backup_host.env

    # Override paths in envfile
    $NAME -e ~/.borgbackup/backup_host.env /home/arthur/guide /home/arthur/memories-from-earth

    # Override exclude in envfile
    $NAME -e ~/.borgbackup/backup_host.env /home/arthur/guide --exclude '*.secret' --exclude '*/guide/drafts'
EOM
}

DEFAULT_CONFDIR="${HOME}/.borgbackup"

# Some helpers and error handling
info() {
  # print timestamped info on stderr
  if [[ -n $1 ]]; then
    printf "%(%F_%T)T %s\n" -1 "$*" >&2
  fi
}
die() {
  # exit with indicated exit code and
  local exitcode=$1
  shift
  info "$*"
  exit "$exitcode"
}
abort() {
  # exits with exit code 2 and message on stderr, without timestamp
  # for user messages on commandline, i.e. at startup failure, where timestamp is ugly
  if [[ -n $1 ]]; then
    echo -e "$*" >&2
  fi
  exit 2
}
warning_or_error() {
  # borg exit code = 1 is warning, others are error.
  # This translates the code to text used in message to user
  local code=$1
  ret="warning"
  [[ $code -gt 1 ]] && ret="error"
  echo $ret
}
trap 'die 2 "Backup interrupted"' INT TERM

source_conf_file() {
  local unqualified_name="$1" filename
  if [[ -n $unqualified_name ]]; then
    filename="$unqualified_name"
    if [[ ${filename:0:1} != '/' ]]; then
      filename="${DEFAULT_CONFDIR}"/"${filename}"
    fi
    # shellcheck disable=SC1090
    source "$filename" || abort
  fi
}

init() {
  local options
  options=$(getopt --name "$NAME" --longoptions "help,dry-run,exclude:,envfile:" -- "e:" "$@")
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then # Problem with getting options?
    abort "$(show_help)"
  fi

  # Sets double dashes, which marks end of getopt parameters
  eval set -- "$options"
  unset options

  local -a excludes_on_cmdline
  unset dry_run
  while true; do
    case $1 in
      --envfile|-e)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires a filename argument"
        envfile="$2"
        shift 2
        ;;
      --exclude)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        excludes_on_cmdline+=("$2")
        shift 2
        ;;
      --dry-run)
        dry_run="true"
        shift
        ;;
      --help)
        show_help
        die 0
        ;;
      --) # end of getopt parsed parameters
        shift
        break
        ;;
    esac
  done

  [[ -z ${envfile} ]] && abort "--envfile (or -e) needed (try \"$NAME --help\")\n$short_usage"
  [[ -r ${envfile} ]] || abort "envfile \"$envfile\" is not readable\n$short_usage"

  local -a paths_on_cmdline=("$@")
  set --

  # Initialize and reset constants that can be sourced from envfile
  BORG_PASSCOMMAND=
  BORG_REPO=
  HEALTHCHECKS_PINGKEY=
  HEALTHCHECKS_SLUG=
  HOOKS=
  KEEP_DAILY=
  KEEP_MONTHLY=
  KEEP_WEEKLY=
  KEEP_YEARLY=
  PATHS_TO_BACKUP=

  source_conf_file "$envfile"

  # Unset functions that can be sourced from HOOKS
  unset -f pre_backup
  unset -f post_backup

  # HOOKS is expected to be set in the envfile
  source_conf_file "$HOOKS"

  # PATHS_TO_BACKUP comes from $envfile, but files on command line overrides
  if [[ ${#paths_on_cmdline[*]} -gt 0 ]]; then
    PATHS_TO_BACKUP=("${paths_on_cmdline[@]}")
  fi
  [[ ${#PATHS_TO_BACKUP[*]} -eq 0 ]] && abort "invalid usage: nothing to backup (no files specified, and environment PATHS_TO_BACKUP is not set)"

  # EXCLUDE comes from $envfile, but patterns on command line overrides (does NOT add to what's in $envfile)
  EXCL=""
  if [[ ${#excludes_on_cmdline[*]} -gt 0 ]]; then
    for excl in "${excludes_on_cmdline[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  elif [[ ${#EXCLUDE[*]} -gt 0 ]]; then
    for excl in "${EXCLUDE[@]}"; do
      EXCL="$EXCL --exclude $excl"
    done
  fi
}

run_hooks() {
  local hooks_to_run=("$@")
  for hook in "${hooks_to_run[@]}"; do
    if [[ $(type -t "$hook") == 'function' ]]; then
      if [[ $dry_run ]]; then
        info "Would run $hook hook"
      else
        info "Running $hook hook"
        $hook
      fi
    fi
  done
}

healthcheck_report() {
  report_type=$1
  if [[ -n "$HEALTHCHECKS_PINGKEY" ]] && [[ -n "$HEALTHCHECKS_SLUG" ]]; then
    case $report_type in
      start)
        curl -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"/start
        ;;
      success)
        curl -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"
        ;;
      fail)
        curl -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"/fail
        ;;
    esac
  fi
}

## main
init "$@"

info "$NAME starting ${dry_run:+"dry-run"}"

# use trap: in case 'borg create' fails we still want to restore system to production mode
trap 'run_hooks post_backup ; info "$NAME ending"' EXIT

healthcheck_report start

run_hooks pre_backup

if [[ $dry_run ]]; then
  borg() {
    info "Would run borg $*"
  }
fi

# shellcheck disable=SC2086
borg create \
  --stats \
  --show-version \
  --show-rc \
  --filter AME \
  --list \
  $EXCL \
  ::'{now:%Y-%m-%dT%H:%M:%S}' \
  "${PATHS_TO_BACKUP[@]}" ||
  {
    healthcheck_report fail
    die $? "borg create ended with $(warning_or_error $?). Not pruning repository" ;
  }

info "Pruning repository"

borg prune \
  --list \
  --show-rc \
  --keep-daily "${KEEP_DAILY:-14}" \
  --keep-weekly "${KEEP_WEEKLY:-4}" \
  --keep-monthly "${KEEP_MONTHLY:-12}" \
  --keep-yearly "${KEEP_YEARLY:-5}" ||
  {
    healthcheck_report fail
    die $? "borg prune ended with $(warning_or_error $?)."
  }

healthcheck_report success
