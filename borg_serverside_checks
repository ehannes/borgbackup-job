#!/bin/bash

PS4='+(${LINENO}) ' # add linenumbers to the trace when run with 'bash -x'
NAME=$(basename "$0")
short_usage="Usage: $NAME -a|--address internet_fqdn --hcpingkey key --hcslug slug"
show_help() {
  cat <<EOM  | sed -e's/^  //'   # left justify help
  ${short_usage}
  Check borg server status and report issues to healthchecks.io

  -a|--address internet_fqdn    The server name in public DNS, e.g
                                example.dyndns.org
  -c|--conf configfile          Name of config file
  --hcpingkey ping              healthchecks.io ping key for project
  --hcslug slugid               healthchecks.io slug id for these checks

  Configuration parameters on command line overrides the parameters in config file.

EOM
}

# constants
ok="OK"
fail="FAIL"

declare_globals() {
  declare -g ipv4regexp='^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$'
  declare -A -g conf
  declare -ag summary
  declare -gi numfaults=0
}
### utils

info() {
  # print timestamped (optional) info on stderr
  # if -n is first parameter, don't timestamp
  printf -v timestamp "%(%F_%T)T" -1
  [[ $1 == "-n" ]] && {
    timestamp=""
    shift
  }
  if [[ -n $1 ]]; then
    echo -e "$timestamp" "$*" >&2
  fi
}
die() {
  # exit with indicated exit code and message on stderr
  # Syntax: die exitcode [-n] message
  local exitcode=$1
  shift
  info "$@"
  exit "$exitcode"
}
abort() {
  # exits with exit code 2 and message on stderr, without timestamp
  # for user messages on commandline, i.e. at startup line, where timestamp is ugly
  die 2 -n "$*"
}

### init

parse_params() {
  eval set -- "$@"
  while [[ $1 ]]; do
    case $1 in
      --address | -a)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[address]=${conf[address]:-"$2"}
        shift
        ;;
      --conf | -c)
        [[ -r $2 ]] || abort "$1 requires a file name argument"
        conf[conffile]=${conf[conffile]:-"$2"}
        shift
        ;;
      --hcpingkey)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[hcpingkey]=${conf[hcpingkey]:-"$2"}
        shift
        ;;
      --hcslug)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[hcslug]=${conf[hcslug]:-"$2"}
        shift
        ;;
      --diskpath)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[diskpath]=${conf[diskpath]:-"$2"}
        shift
        ;;
      --min_size)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[min_size]=${conf[min_size]:-"$2"}
        shift
        ;;
      --help | -h)
        show_help
        die 0
        ;;
      --) # end of getopt parsed parameters
        break
        ;;
      *)
        abort "unknown parameter: $1\n$short_usage"
        ;;
    esac
    shift
  done
}

source_conf_file() {
  local unqualified_name="$1"

  local filename
  if [[ -n $unqualified_name ]]; then
    filename="$unqualified_name"
    if [[ ${filename:0:1} != '/' ]]; then
      filename="${DEFAULT_CONFDIR}"/"${filename}"
    fi
    for p in $parameters; do
      unset "${!p}"
    done
    # shellcheck disable=SC1090
    source "$filename" || abort
  fi

  local conffile_options
  for p in $parameters; do
    if [[ ${!p} ]]; then
      conffile_options="$conffile_options --$p ${!p}"
    fi
  done
  if [[ $conffile_options ]]; then
    # shellcheck disable=SC2086 # double quote to prevent word split. (we want word splitting here)
    parse_params $conffile_options
  fi
}

init() {
  declare_globals

  local parameters="address hcpingkey hcslug conf min_size diskpath"
  local options
  options=$(getopt --name "$NAME" --longoptions "help,address:,hcpingkey:,hcslug:,conf:,min_size:,diskpath:" -- "a:c:" "$@")
  #echo "options:$options"
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then # Problem with getting options?
    abort "$(show_help)"
  fi

  #  eval set -- "$options"
  #  unset options

  parse_params $options
  #echo "cmdline params:"
  #for p in "${!conf[@]}"; do echo "|$p|=|${conf[$p]}|";done
  if [[ ${conf[conffile]} ]]; then
    abort conf file support not yet implemented
#    source_conf_file "${conf[conffile]}"
  fi

  # verify input and configuration

  for required_param in address diskpath; do
    if [[ -z ${conf[$required_param]} ]]; then
      abort "Required parameter missing: ${required_param}\n$short_usage"
    fi
  done
  [[ -d ${conf[diskpath]} ]] || abort "Invalid diskpath (${conf[diskpath]}): not a directory"
  [[ ${conf[hcpingkey]} ]]  && export HEALTHCHECKS_PINGKEY="${conf[hcpingkey]}"
  [[ ${conf[hcslug]} ]]  && export HEALTHCHECKS_SLUG="${conf[hcslug]}"
}

### reporting tools

register_result() {
  local result=$1  # $ok or $fail
  shift
  local name="$*"
  info "${name}": "$result"
  summary+=("$name: $result")
  if [[ $result == "$fail" ]]; then
    ((numfaults += 1))
  fi
}

healthcheck_report() {
  local report_type=$1

  local -i curl_ret=142
  if [[ -n "$HEALTHCHECKS_PINGKEY" ]] && [[ -n "$HEALTHCHECKS_SLUG" ]]; then
    case $report_type in
      start)
        curl -f -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"/start
        ;;
      success)
        curl -f -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"
        ;;
      fail)
        curl -f -m 10 --retry 5 https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"/fail
        ;;
    esac
    curl_ret=$?
    report_result=$ok
    # shellcheck disable=SC2181 # Check exit code directly, not indirectly with $?
    if ((curl_ret > 0)); then
      report_result="$fail"
      report_type="$report_type (curl exit=$curl_ret)"
    fi
    register_result $report_result "reporting $report_type to hc-ping.com"
  else
    info "hc-ping.com reporting is not enabled, not reporting $report_type"
  fi
}

evaluate_and_report_healthckecksio() {
  info "Faults found: $numfaults"
  info Summary:
  for line in "${summary[@]}"; do
    info -n "$line"
  done
  if ((numfaults >= 1)); then
    healthcheck_report fail
  else
    healthcheck_report success
  fi
}

### check helpers
do_check() {
  local checkfunc=$1
  shift
  local checkname="$*"
  test_result=$fail
  if $checkfunc; then
    test_result=$ok
  fi
  register_result $test_result "$checkname"
}
is_ipv4regexp() {
  [[ $1 =~ $ipv4regexp ]]
}

filter_hostip() {
  # process output from command `host`
  tee /dev/stderr | sed -ne'/^.*has address /{s/.*has address //;p}'
}

#checks
check_server_running() {
  test="is-system-running (systemd)"
  test_result=$fail
  if systemctl is-system-running; then
    test_result=$ok
  else
    # print failure info to the log
    systemctl --failed
  fi
  register_result $test_result "$test"
}

get_public_ip() {
  the_ip=$(host myip.opendns.com. resolver4.opendns.com | filter_hostip)
  do_check "is_ipv4regexp $the_ip" "get external (internet) ip address."

  ret="$the_ip"
}

get_dns_ip() {
  local internet_fqdn="$1"

  local the_ip
  the_ip=$(host "$internet_fqdn" | filter_hostip)

  do_check "is_ipv4regexp $the_ip" "get dns entry for $internet_fqdn"
  ret="$the_ip"
}

verify_ips_are_same() {
  local dns_ip=$1
  local actual_ip=$2

  do_check "test $dns_ip == $actual_ip" "dns ip ($dns_ip) same as actual ip ($actual_ip)"
}

check_disk_space() {
  local path=$1

  # for the log
  df -h --output

  local avail_gb
  avail_gb=$(df -BG --output=avail "$path" | tail -1 | tr -cd 0-9)
  enough_gb_avail() {
    ((avail_gb >= ${conf[min_size]:-100}))
  }
  do_check enough_gb_avail "Disk available for $path (${avail_gb}GB>=${conf[min_size]:-100}GB)"
}

main() {
  init "$@"
  local ret # function return variable

  healthcheck_report start

  check_server_running

  get_public_ip
  actual_ip=$ret

  get_dns_ip "$address"
  dns_ip=$ret

  verify_ips_are_same "$dns_ip" "$actual_ip"

  check_disk_space "${conf[diskpath]}"

  evaluate_and_report_healthckecksio
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
  mainret=$?
  if [ $mainret -gt 0 ]; then
    exit $mainret
  fi
fi
