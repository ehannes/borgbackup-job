#!/bin/bash
# shellcheck disable=SC2155
#   "Declare and assign separately..." (stupid rule for 'local')

PS4='+(${LINENO}) ' # add linenumbers to the trace when run with 'bash -x'
NAME=$(basename "$0")
short_usage="Usage: $NAME [-c|--conf configfile][options]"
show_help() {
  cat <<EOM  | sed -e's/^  //'   # left justify help
  ${short_usage}
  Check borg server status and report issues to healthchecks.io

  -a|--address internet_fqdn  The server name of this host in public DNS, e.g
                              example.dyndns.org
  -c|--conf configfile        Name of config file
  --hcpingkey ping            healthchecks.io ping key for project
  --hcslug slugid             healthchecks.io slug id for these checks
  --diskcheckGB               minimum healhty size (unit: GB) and disk path to monitor
                              Repeat --diskcheckGB to monitor several directories.
                              Format: size:"/path/to/dir".
  --logdir directory          Where to create log file. If not set, log to disk is not enabled.
  -|--help                    Show this help and exit.
  Configuration parameters on command line overrides the parameters in config file.
EOM
}

# constants
ok="OK"
fail="FAIL"
DEFAULT_CONFDIR="${HOME}/.borgbackup"

declare_globals() {
  declare -g ipv4regexp='^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$'
  declare -g -A conf
  declare -g -a summary
  declare -g -i numfaults=0
  declare -g parameterlist
  declare -g -A  conf_diskcheck
  declare -g exitcode
  declare -g logfile
}
#################### utils

info() {
  # print timestamped (optional) info on stderr
  # if -n is first parameter, don't timestamp
  printf -v timestamp "%(%F_%T)T" -1
  [[ $1 == "-n" ]] && {
    timestamp=""
    shift
  }
  if [[ -n $1 ]]; then
    echo -e "$timestamp" "$*" >&2
  fi
}
die() {
  # exit with indicated exit code and message on stderr
  # Syntax: die exitcode [-n] message
  local exitcode=$1
  shift
  info "$@"
  exit "$exitcode"
}
abort() {
  # exits with exit code 2 and message on stderr, without timestamp
  # for user messages on commandline, i.e. at startup line, where timestamp is ugly
  die 2 -n "$*"
}

#################### init

parse_params() {
  eval set -- "$@"
  while [[ $1 ]]; do
    case $1 in
      --address | -a)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[address]=${conf[address]:-"$2"}
        shift
        ;;
      --conf | -c)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        [[ -r "$(get_conf_file_name "$2")" ]] || abort "$1: $2 is not a readable file"
        conf[conffile]=${conf[conffile]:-"$2"}
        shift
        ;;
      --hcpingkey)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[hcpingkey]=${conf[hcpingkey]:-"$2"}
        shift
        ;;
      --hcslug)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[hcslug]=${conf[hcslug]:-"$2"}
        shift
        ;;
      --diskcheckGB)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        [[ $2 =~ [0-9]+:.+ ]] || abort "$1 $2: Invalid format, use \"$1 <size>:<path>\""
        [[ ${2%%:*} =~ [0-9]+ ]] || abort "$1 $2: Invalid format (size not numerical), use \"$1 <size>:<path>\""
        [[ -d ${2#*:} ]] || abort "$1: \"${2#*:}\" is not a (accessbile) directory"
        conf_diskcheck[${2#*:}]=${2%%:*}
        shift
        ;;
      --logdir)
        [[ ${2:0:1} != '-' ]] || abort "$1 requires an argument"
        conf[logdir]=${conf[logdir]:-"$2"}
        shift
        ;;
      --help | -h)
        show_help
        die 0
        ;;
      --) # end of getopt parsed parameters
        break
        ;;
      *)
        abort "unknown parameter: $1\n$short_usage"
        ;;
    esac
    shift
  done
}

get_conf_file_name() {
  local unqualified_name="$1"

  local filename
  if [[ -e "$unqualified_name" ]]; then
    filename="$unqualified_name"
  else
    if [[ ${unqualified_name:0:1} != '/' ]]; then
      filename="${DEFAULT_CONFDIR}"/"${unqualified_name}"
    fi
  fi
  echo "$filename"
}
source_conf_file() {
  local unqualified_name="$1"
  local filename=$(get_conf_file_name "$unqualified_name")

  for p in $parameterlist; do
    # shellcheck disable=SC2086
    #   "double quote to prevent globbing"
    unset ${!p}
  done
  # shellcheck disable=SC1090
  source "$filename" || abort

  local conffile_options
  for p in $parameterlist; do
    if [[ ${!p} ]]; then
      if [[ $p == "diskcheckGB" && ! ${conf_diskcheck[*]}  ]]; then # don't use conffile if already on cmdline
        # shellcheck disable=SC2154
        #   "var is referenced but not assigned"
        for diskcheck in "${diskcheckGB[@]}"; do
          # shellcheck disable=SC2089
          #   "Quotes/backslashes will be treated literally"
          conffile_options="$conffile_options --diskcheckGB \"$diskcheck\""
        done
      else
        conffile_options="$conffile_options --$p ${!p}"
      fi
    fi
  done
  if [[ $conffile_options ]]; then
    # shellcheck disable=SC2086 disable=SC2090
    #   "Double quote to prevent globbing and word splitting", we want word splitting here
    #   "Quotes/backslashes in this variable will not be respected", but eval does in parse_params
    parse_params $conffile_options
  fi
}

init() {
  declare_globals

  parameterlist="address hcpingkey hcslug conf diskcheckGB logdir"
  local options
  options=$(getopt --name "$NAME" --longoptions "help,address:,hcpingkey:,hcslug:,conf:,diskcheckGB:,logdir:" -- "a:c:" "$@")
  # shellcheck disable=SC2181
  if [[ $? -ne 0 ]]; then # Problem with getting options?
    abort "$(show_help)"
  fi

  # initialize config variables that can be set sourced from config file
  unset address diskcheckGB logdir
  unset hcpingkey hcslug

  # shellcheck disable=SC2086
  #   "Double quote to prevent globbing and word splitting", we want word splitting here
  parse_params $options
  if [[ ${conf[conffile]} ]]; then
    source_conf_file "${conf[conffile]}"
  fi

  [[ -z ${conf[address]} ]] && abort "Required parameter missing: address\n$short_usage"
  [[ ${conf[hcpingkey]} ]]  && export HEALTHCHECKS_PINGKEY="${conf[hcpingkey]}"
  [[ ${conf[hcslug]} ]]  && export HEALTHCHECKS_SLUG="${conf[hcslug]}"
}

# shellcheck disable=SC2120
setup_logging() {
  local logdir=${LOGDIR:-"$1"}
  local logname=$NAME.$(date +%d).log
  logfile=$logdir/$logname

  if [[ -z $logdir ]]; then
    register_result $ok "Skipping log file creation, logdir not set"
    return
  fi

  mkdir -p "$logdir" || die 1 "unable to create logdir=$logdir" # don't accidentally delete files in next lines
  oldfile="$(find "$logdir" -name "$logname" ! -newermt 'now - 1day')"
  [[ $oldfile ]] && rm "$oldfile"
  exec > >( tee -a "$logfile")  2>&1
  do_check "[ $? == 0 ]" "Setup logging to disk ($(basename "$logfile"))"
}

#################### reporting tools

register_result() {
  local result=$1   # $ok or $fail
  shift
  local name="$*"   # name of check
  info "${name}": "$result"
  summary+=("$name: $result")
  if [[ $result == "$fail" ]]; then
    ((numfaults += 1))
  fi
}

healthcheck_report() {
  local report_type=$1

  local -i curl_ret=142
  if [[ -n "$HEALTHCHECKS_PINGKEY" ]] && [[ -n "$HEALTHCHECKS_SLUG" ]]; then
    SLUGURL=https://hc-ping.com/"${HEALTHCHECKS_PINGKEY}/${HEALTHCHECKS_SLUG}"
    logdata=$(IFS=$'\n'; echo -n "${summary[*]}" )
    case $report_type in
      start)
        curl --silent --show-error --max-time 10 --retry 5 "$SLUGURL"/start
        ;;
      success)
        curl --silent --show-error --max-time 10 --retry 5 --data-raw "$logdata" "$SLUGURL"
        ;;
      fail)
        curl --silent --show-error --max-time 10 --retry 5 --data-raw "$logdata" "$SLUGURL"/fail
        ;;
    esac
    curl_ret=$?
    report_result=$ok
    if ((curl_ret > 0)); then
      report_result="$fail"
      report_type="$report_type (curl exit=$curl_ret)"
    fi
    register_result $report_result "reporting $report_type to hc-ping.com"
  else
    info "hc-ping.com reporting is not enabled, not reporting $report_type"
  fi
}

evaluate_and_report_healthckecksio() {
  info "Faults found: $numfaults"
  info Summary:
  for line in "${summary[@]}"; do
    info -n "$line"
  done
  if ((numfaults >= 1)); then
    healthcheck_report fail
  else
    healthcheck_report success
  fi
  ret=$numfaults
}

#################### check helpers

do_check() {
  local checkfunc=$1
  shift
  local checkname="$*"
  test_result=$fail
  if $checkfunc; then
    test_result=$ok
  fi
  register_result $test_result "$checkname"
}
is_ipv4regexp() {
  [[ $1 =~ $ipv4regexp ]]
}

filter_hostip() {
  # process output from command `host`
  tee /dev/stderr | sed -ne'/^.*has address /{s/.*has address //;p}'
}

#################### checks

check_server_internal_health() {
  test="is-system-running (systemd)"
  test_result=$fail
  if systemctl is-system-running; then
    test_result=$ok
  else
    # print failure info to the log
    systemctl --failed
  fi
  register_result $test_result "$test"
}

get_public_ip() {
  the_ip=$(host myip.opendns.com. resolver4.opendns.com | filter_hostip)
  do_check "is_ipv4regexp $the_ip" "get external (internet) ip address"

  ret="$the_ip"
}

get_dns_ip() {
  local internet_fqdn="$1"

  local the_ip
  the_ip=$(host "$internet_fqdn" | filter_hostip)

  do_check "is_ipv4regexp $the_ip" "get dns entry for $internet_fqdn"
  ret="$the_ip"
}

verify_ips_are_same() {
  local dns_ip=$1
  local actual_ip=$2

  do_check "test $dns_ip == $actual_ip" "dns ip ($dns_ip) same as actual ip ($actual_ip)"
}

check_disk_space() {
  if (( ${#conf_diskcheck[@]} == 0 )); then
    register_result $ok "Available disk check not configured, diskcheckGB not set"
  else
    for path in "${!conf_diskcheck[@]}"; do
      # for the log
      df -h --output "$path"

      local required_gb=${conf_diskcheck[$path]}
      local avail_gb
      avail_gb=$(df -BG --output=avail "$path" | tail -1 | tr -cd 0-9)
      enough_gb_avail() {
        ((avail_gb >= required_gb))
      }
      do_check enough_gb_avail "Disk available for $path (${avail_gb}GB >= ${required_gb}GB)"
    done
  fi
}

#################### main

main() {
  init "$@"
  local ret # function return variable

  setup_logging "${conf[logdir]}"

  healthcheck_report start

  check_server_internal_health

  get_public_ip
  actual_ip=$ret

  get_dns_ip "$address"
  dns_ip=$ret

  verify_ips_are_same "$dns_ip" "$actual_ip"

  check_disk_space

  evaluate_and_report_healthckecksio
  exitcode=$ret   # the exitcode is number of faults found
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then # enable bats
  main "$@"
  exit "$exitcode"
fi
